// Global Variables
var currentScene = 0; // 0 = Splash screen, 1 = Game Screen, 2 = Game Over screen, 3 = instruction Screen
var stillPlaying = true; // boolean function
var score = 0; // 1 score for each pipe the bird go through without hitting the pipe
var numSticks=100; // numer of sticks
var clouds = []; // clouds for game screen

var drawPixelatedEllipse = function(x, y, width, height, colour) {
    fill(colour);
    ellipse(x, y, width, height);
    
    noStroke();
    fill(red(colour) + 10, green(colour) + 10, blue(colour) + 10);
    for(var i = 0; i <= 360; i += 7) {
        var x1 = x + cos(i) * (width / 2);
        var y1 = y + sin(i) * (height / 2);
        
        rect(x1 - 3, y1 - 3, 6, 6);
     }
};

//bitmoji code for Laila
var drawBitmoji = function (x, y, bitmojiHeight) {
    noStroke ();
    rectMode(CORNER);
        ellipseMode(CENTER);
    fill (222, 154, 109); // skin tone
    ellipse (x+(bitmojiHeight/150), y+(bitmojiHeight/150), bitmojiHeight/150*86,       bitmojiHeight/150*101); // head
    fill (13, 12, 12); // black hair
    ellipse (x+(bitmojiHeight/150), y-(bitmojiHeight/150*37), bitmojiHeight/150*62, bitmojiHeight/150*28); // glasses
    ellipse (x+(bitmojiHeight/150), y-(bitmojiHeight/150*37), bitmojiHeight/150*62, bitmojiHeight/150*28); // glasses
    stroke (0, 0, 0); // stroke for glasses 
    fill (222, 154, 109); // skin tone under the glasses
    ellipse (x-(bitmojiHeight/150*16), y+(bitmojiHeight/150), bitmojiHeight/150*25,     bitmojiHeight/150*19); // glasses left 
    ellipse (x+(bitmojiHeight/150*16), y+(bitmojiHeight/150), bitmojiHeight/150*25, bitmojiHeight/150*19); // glasses right
    line (x+(bitmojiHeight/150*4), y+(bitmojiHeight/150), x-(bitmojiHeight/150*4), y+(bitmojiHeight/150)); // glasses nose bridge
    line (x-(bitmojiHeight/150*27), y-(bitmojiHeight/150*1), x-(bitmojiHeight/150*44), y-(bitmojiHeight/150*12)); // glasses side left
    line (x+(bitmojiHeight/150*27), y+(bitmojiHeight/150*1), x+(bitmojiHeight/150*44), y-(bitmojiHeight/150*12)); // glasses side right
    fill (69,24,0); // eyes color
    ellipse (x-(bitmojiHeight/150*16), y+(bitmojiHeight/150), bitmojiHeight/150*10, bitmojiHeight/150*12); // left eye
    ellipse(x+(bitmojiHeight/150*16), y+(bitmojiHeight/150), bitmojiHeight/150*10, bitmojiHeight/150*12); // right eye
    fill (222, 154, 109); //fill to skin tone
    bezier(x+(bitmojiHeight/150), y+(bitmojiHeight/150), x+(bitmojiHeight/150*21), y+(bitmojiHeight/150*22), x-(bitmojiHeight/150*8), y+(bitmojiHeight/150*20), x-(bitmojiHeight/150*4), y+(bitmojiHeight/150*15)); // nose
    fill (255, 255, 255); // white fill for teeth
    arc(x+(bitmojiHeight/150*3), y+(bitmojiHeight/150*25), bitmojiHeight/150*30, bitmojiHeight/150*13, bitmojiHeight/150*1, bitmojiHeight/150*181); // mouth 
    line (x-(bitmojiHeight/150*13), y+(bitmojiHeight/150*24), x+(bitmojiHeight/150*19), y+(bitmojiHeight/150*24)); // top of mouth
    fill (255, 0, 68); // Graduation Gown 
    quad(x+(bitmojiHeight/150*8), y+(bitmojiHeight/150*116), x-(bitmojiHeight/150*76), y+(bitmojiHeight/150*85), x-(bitmojiHeight/150*51), y+(bitmojiHeight/150*28), x+(bitmojiHeight/150*10), y+(bitmojiHeight/150*64)); // left gown 
    quad(x+(bitmojiHeight/150*17), y+(bitmojiHeight/150*116), x+(bitmojiHeight/150*101), y+(bitmojiHeight/150*67), x+(bitmojiHeight/150*62), y+(bitmojiHeight/150*28), x+(bitmojiHeight/150*12), y+(bitmojiHeight/150*64)); // right gown 
    fill (255, 0, 68); //cords
    rect(x+(bitmojiHeight/150*51), y+(bitmojiHeight/150*30), bitmojiHeight/150*17,bitmojiHeight/150*113, bitmojiHeight/150*37); // left cord
    rect (x-(bitmojiHeight/150*52), y+(bitmojiHeight/150*33), bitmojiHeight/150*17, bitmojiHeight/150*113, bitmojiHeight/150*37); // right cord
    fill (255, 0, 68); // cap color
    quad (x-(bitmojiHeight/150*44), y-(bitmojiHeight/150*32), x+(bitmojiHeight/150*36), y-(bitmojiHeight/150*12), x+(bitmojiHeight/150*55), y-(bitmojiHeight/150*74), x-(bitmojiHeight/150*20), y-(bitmojiHeight/150*91)); // cap 
    fill (255, 0, 68); // cap circle color
    ellipse (x+(bitmojiHeight/150*16), y-(bitmojiHeight/150*53), bitmojiHeight/150*23, bitmojiHeight/150*17); // cap circle
    fill (31, 24, 24); // cap line
    line (x+(bitmojiHeight/150*29), y+(bitmojiHeight/150*8), x+(bitmojiHeight/150*27), y-(bitmojiHeight/150*55)); // line 1
    line (x+(bitmojiHeight/150*33), y+(bitmojiHeight/150*8), x+(bitmojiHeight/150*27), y-(bitmojiHeight/150*55)); // line 2
    line (x+(bitmojiHeight/150*37), y+(bitmojiHeight/150*8), x+(bitmojiHeight/150*27), y-(bitmojiHeight/150*55)); // line 3
    line (x+(bitmojiHeight/150*24), y+(bitmojiHeight/150*8), x+(bitmojiHeight/150*27), y-(bitmojiHeight/150*55)); // line 4
    fill (43, 33, 33); // text
    textSize(bitmojiHeight/150*30);
    text("L", x-(bitmojiHeight/150*23), y+(bitmojiHeight/150*60)); 
    text("G", x+(bitmojiHeight/150*23), y+(bitmojiHeight/150*60)); 
    };
    
//bitmoji code for Heriell
var bitmojiXs = 0;
var bitmojiYs = 0;
var bitmojiH = 100;
var fillSkin = function(){
  fill(232, 185, 97); //skin tone  
};
var drawEyes = function(bitmojiXs ,bitmojiYs,bitmojiH){
  fill(247, 247, 247); //white of eyes
  ellipse(bitmojiXs+(93/75)*bitmojiH,bitmojiYs+(100/75)*bitmojiH,(17/75)*bitmojiH,(10/75)*bitmojiH); //left eye shape
  ellipse(bitmojiXs+(115/75)*bitmojiH,bitmojiYs+(100/75)*bitmojiH,(17/75)*bitmojiH,(10/75)*bitmojiH); //right eye shape
  stroke(0, 0, 0); //border of iris
  fill(153, 94, 0); //iris color
  ellipse(bitmojiXs+(93/75)*bitmojiH,bitmojiYs+(100/75)*bitmojiH,(5/75)*bitmojiH,(5/75)*bitmojiH); //left iris
  ellipse(bitmojiXs+(113/75)*bitmojiH,bitmojiYs+(100/75)*bitmojiH,(5/75)*bitmojiH,(5/75)*bitmojiH); //right iris
};
var drawNose = function(bitmojiXs,bitmojiYs,bitmojiH){
    stroke(0, 0, 0);//nosestroke
    fillSkin();
    bezier(bitmojiXs+(104/75)*bitmojiH,bitmojiYs+(100/75)*bitmojiH,bitmojiXs+(121/75)*bitmojiH,bitmojiYs+(115/75)*bitmojiH,bitmojiXs+(94/75)*bitmojiH,bitmojiYs+(120/75)*bitmojiH,bitmojiXs+(101/75)*bitmojiH,bitmojiYs+(109/75)*bitmojiH);//shape of nose
};
var drawMouth = function(bitmojiXs,bitmojiYs,bitmojiH){
        stroke(125, 72, 128);//lip color
    fill(255,255, 255);//white for teeth
    arc(bitmojiXs+(101/75)*bitmojiH,bitmojiYs+(119/75)*bitmojiH,(30/75)*bitmojiH,(13/75)*bitmojiH,1,180);//shape of mouth
    line(bitmojiXs+(87/75)*bitmojiH,bitmojiYs+(119/75)*bitmojiH,bitmojiXs+(115/75)*bitmojiH,bitmojiYs+(119/75)*bitmojiH);//upper lip
};
var drawFacHair = function(bitmojiXs,bitmojiYs,bitmojiH){
  noStroke();
  fill(0, 0, 0);//black hair
   arc(bitmojiXs+(102/75)*bitmojiH,bitmojiYs+(126/75)*bitmojiH,(11/75)*bitmojiH,(7/75)*bitmojiH,0,180);//soul patch
  
  stroke(0, 0, 0);
  noFill();
  arc(bitmojiXs+(102/75)*bitmojiH,bitmojiYs+(129/75)*bitmojiH,(48/75)*bitmojiH,(-25/75)*bitmojiH,46,137);//mustache
  fill(0, 0, 0);
  rect(bitmojiXs+(107/75)*bitmojiH,bitmojiYs+(91/75)*bitmojiH,(11/75)*bitmojiH,(2/75)*bitmojiH);//right eyebrow
  rect(bitmojiXs+(87/75)*bitmojiH,bitmojiYs+(91/75)*bitmojiH,(11/75)*bitmojiH,(2/75)*bitmojiH);//left eyebrow
  
};
var drawHair = function(bitmojiXs,bitmojiYs,bitmojiH){
    stroke(0, 0, 0);
    fill(0, 0, 0);
    arc(bitmojiXs+(100/75)*bitmojiH,bitmojiYs+(83/75)*bitmojiH,(64/75)*bitmojiH,(-41/75)*bitmojiH,-1,180);//top of hair
    triangle(bitmojiXs+(68/75)*bitmojiH,bitmojiYs+(81/75)*bitmojiH,bitmojiXs+(82/75)*bitmojiH,bitmojiYs+(81/75)*bitmojiH,bitmojiXs+(76/75)*bitmojiH,bitmojiYs+(103/75)*bitmojiH);//left side
    triangle(bitmojiXs+(132/75)*bitmojiH,bitmojiYs+(84/75)*bitmojiH,bitmojiXs+(121/75)*bitmojiH,bitmojiYs+(74/75)*bitmojiH,bitmojiXs+(126/75)*bitmojiH,bitmojiYs+(103/75)*bitmojiH);//right side
};
var drawGlass = function(bitmojiXs,bitmojiYs,bitmojiH){
    stroke(0,0,0);
    noFill();
    rect(bitmojiXs+(84/75)*bitmojiH,bitmojiYs+(95/75)*bitmojiH,(17/75)*bitmojiH,(10/75)*bitmojiH);//left square
    rect(bitmojiXs+(106/75)*bitmojiH,bitmojiYs+(95/75)*bitmojiH,(17/75)*bitmojiH,(10/75)*bitmojiH);//right square
    arc(bitmojiXs+(104/75)*bitmojiH,bitmojiYs+(148/75)*bitmojiH,(41/75)*bitmojiH,(-99/75)*bitmojiH,82,98);//arch
    
    line(bitmojiXs+(76/75)*bitmojiH,bitmojiYs+(100/75)*bitmojiH,bitmojiXs+(83/75)*bitmojiH,bitmojiYs+(100/75)*bitmojiH);//left leg
    
};
var drawHead = function(bitmojiXs,bitmojiYs,bitmojiH){
  noStroke();
  fill(232, 185, 97); //skin tone
  ellipse(bitmojiXs+(100/75)*bitmojiH,bitmojiYs+(100/75)*bitmojiH,(50/75)*bitmojiH,bitmojiH); //head shape
  drawEyes(bitmojiXs,bitmojiYs,bitmojiH);
  drawGlass(bitmojiXs,bitmojiYs,bitmojiH);
  drawNose(bitmojiXs,bitmojiYs,bitmojiH);
  drawMouth(bitmojiXs,bitmojiYs,bitmojiH);
  drawFacHair(bitmojiXs,bitmojiYs,bitmojiH);
  drawHair(bitmojiXs,bitmojiYs,bitmojiH);
  
};
var drawNeck = function(bitmojiXs,bitmojiYs,bitmojiH){
  noStroke();
  fillSkin();
  rect(bitmojiXs+(91/75)*bitmojiH,bitmojiYs+(139/75)*bitmojiH,(19/75)*bitmojiH,(16/75)*bitmojiH);//neck
  fill(0, 0, 0);
  ellipse(bitmojiXs+(100/75)*bitmojiH,bitmojiYs+(110/75)*bitmojiH,(39/75)*bitmojiH,(66/75)*bitmojiH);//goatee
  
};
var drawCollarA = function(bitmojiXs,bitmojiYs,bitmojiH){
  noStroke();
  fill(0, 0, 0);
  rect(bitmojiXs+(82/75)*bitmojiH,bitmojiYs+(138/75)*bitmojiH,(38/75)*bitmojiH,(11/75)*bitmojiH);//back of collar
};
var drawCollarB = function(bitmojiXs,bitmojiYs,bitmojiH){
    stroke(148, 148, 148);
    fill(0, 0, 0);
    quad(bitmojiXs+(82/75)*bitmojiH,bitmojiYs+(138/75)*bitmojiH,bitmojiXs+(82/75)*bitmojiH,bitmojiYs+(138/75)*bitmojiH,bitmojiXs+(104/75)*bitmojiH,bitmojiYs+(155/75)*bitmojiH,bitmojiXs+(82/75)*bitmojiH,bitmojiYs+(150/75)*bitmojiH);//left collar
    quad(bitmojiXs+(121/75)*bitmojiH,bitmojiYs+(138/75)*bitmojiH,bitmojiXs+(121/75)*bitmojiH,bitmojiYs+(138/75)*bitmojiH,bitmojiXs+(104/75)*bitmojiH,bitmojiYs+(155/75)*bitmojiH,bitmojiXs+(121/75)*bitmojiH,bitmojiYs+(149/75)*bitmojiH);//right collar
};
var drawButtons = function(bitmojiXs,bitmojiYs,bitmojiH){
  noStroke();
  fill(148, 148, 148);
  ellipse(bitmojiXs+(108/75)*bitmojiH,bitmojiYs+(165/75)*bitmojiH,(3/75)*bitmojiH,(3/75)*bitmojiH);
  ellipse(bitmojiXs+(108/75)*bitmojiH,bitmojiYs+(177/75)*bitmojiH,(3/75)*bitmojiH,(3/75)*bitmojiH);
  ellipse(bitmojiXs+(108/75)*bitmojiH,bitmojiYs+(188/75)*bitmojiH,(3/75)*bitmojiH,(3/75)*bitmojiH);
  ellipse(bitmojiXs+(108/75)*bitmojiH,bitmojiYs+(199/75)*bitmojiH,(3/75)*bitmojiH,(3/75)*bitmojiH);
};
var drawH = function(bitmojiXs,bitmojiYs,bitmojiH){
    stroke(148, 148, 148);
    fill(0,0,0);
    rect(bitmojiXs+(65/75)*bitmojiH,bitmojiYs+(163/75)*bitmojiH,(20/75)*bitmojiH,(8/75)*bitmojiH);
    rect(bitmojiXs+(65/75)*bitmojiH,bitmojiYs+(158/75)*bitmojiH,(8/75)*bitmojiH,(20/75)*bitmojiH);
    rect(bitmojiXs+(77/75)*bitmojiH,bitmojiYs+(158/75)*bitmojiH,(8/75)*bitmojiH,(20/75)*bitmojiH);
};
var drawM = function(bitmojiXs,bitmojiYs,bitmojiH){
    quad(bitmojiXs+(69/75)*bitmojiH,bitmojiYs+(197/75)*bitmojiH,bitmojiXs+(69/75)*bitmojiH,bitmojiYs+(207/75)*bitmojiH,bitmojiXs+(77/75)*bitmojiH,bitmojiYs+(191/75)*bitmojiH,bitmojiXs+(74/75)*bitmojiH,bitmojiYs+(176/75)*bitmojiH);
    triangle(bitmojiXs+(85/75)*bitmojiH,bitmojiYs+(201/75)*bitmojiH,bitmojiXs+(77/75)*bitmojiH,bitmojiYs+(191/75)*bitmojiH,bitmojiXs+(74/75)*bitmojiH,bitmojiYs+(176/75)*bitmojiH);
    quad(bitmojiXs+(100/75)*bitmojiH,bitmojiYs+(196/75)*bitmojiH,bitmojiXs+(101/75)*bitmojiH,bitmojiYs+(207/75)*bitmojiH,bitmojiXs+(92/75)*bitmojiH,bitmojiYs+(191/75)*bitmojiH,bitmojiXs+(91/75)*bitmojiH,bitmojiYs+(178/75)*bitmojiH);
    triangle(bitmojiXs+(92/75)*bitmojiH,bitmojiYs+(191/75)*bitmojiH,bitmojiXs+(85/75)*bitmojiH,bitmojiYs+(201/75)*bitmojiH,bitmojiXs+(91/75)*bitmojiH,bitmojiYs+(178/75)*bitmojiH);
};
var drawShirt = function(bitmojiXs,bitmojiYs,bitmojiH){
    stroke(148, 148, 148);
    fill(0, 0, 0);
    rect(bitmojiXs+(41/75)*bitmojiH,bitmojiYs+(149/75)*bitmojiH,(66/75)*bitmojiH,(60/75)*bitmojiH,15);//left side
    rect(bitmojiXs+(102/75)*bitmojiH,bitmojiYs+(149/75)*bitmojiH,(66/75)*bitmojiH,(60/75)*bitmojiH,15);//right side
    fill(255, 255, 255);
    triangle(bitmojiXs+(60/75)*bitmojiH,bitmojiYs+(210/75)*bitmojiH,bitmojiXs+(70/75)*bitmojiH,bitmojiYs+(210/75)*bitmojiH,bitmojiXs+(60/75)*bitmojiH,bitmojiYs+(174/75)*bitmojiH);//left arm
    triangle(bitmojiXs+(150/75)*bitmojiH,bitmojiYs+(210/75)*bitmojiH,bitmojiXs+(140/75)*bitmojiH,bitmojiYs+(210/75)*bitmojiH,bitmojiXs+(150/75)*bitmojiH,bitmojiYs+(174/75)*bitmojiH);//right armm
    drawButtons(bitmojiXs,bitmojiYs,bitmojiH);
    stroke(255, 255, 255);
    fill(255, 255, 255);
    line(bitmojiXs+(150/75)*bitmojiH,bitmojiYs+(210/75)*bitmojiH,bitmojiXs+(140/75)*bitmojiH,bitmojiYs+(210/75)*bitmojiH);// left white line to make the armpit clean on the bottom
    line(bitmojiXs+(60/75)*bitmojiH,bitmojiYs+(210/75)*bitmojiH,bitmojiXs+(70/75)*bitmojiH,bitmojiYs+(210/75)*bitmojiH);// ditto top but right
    drawH(bitmojiXs,bitmojiYs,bitmojiH);
    drawM(bitmojiXs,bitmojiYs,bitmojiH);
};
var drawTorso = function(bitmojiXs,bitmojiYs,bitmojiH){
    drawCollarA(bitmojiXs,bitmojiYs,bitmojiH);
    drawNeck(bitmojiXs,bitmojiYs,bitmojiH);
    drawShirt(bitmojiXs,bitmojiYs,bitmojiH);
    drawCollarB(bitmojiXs,bitmojiYs,bitmojiH);
};
var drawBit = function(bitmojiXs,bitmojiYs,bitmojiH){
     drawTorso(bitmojiXs,bitmojiYs,bitmojiH);
     drawHead(bitmojiXs,bitmojiYs,bitmojiH);
};

//Paste in Khan Button class      
var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick ||
function() {};
};

Button.prototype.draw = function() {
    fill(0, 238, 255);
    rect(this.x, this.y, this.width, this.height, 5);
    fill(0, 0, 0);
    textSize(19);
    textAlign(LEFT, TOP);
    text(this.label, this.x+10, this.y+this.height/4);
};

Button.prototype.isMouseInside = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};

// start button
var startButton = new Button({
    x:220,
    y:300,
    width:86, 
    height: 40,
    label: "  Start",
    onClick: function() {
        stillPlaying=true;
            currentScene=1;
}
});

// How to play button
var guideButton = new Button({
    x: 70, 
    y:300, 
    width:120, 
    height: 40,
    label: "How to Play", 
    onClick: function(){
        stillPlaying=false;
        currentScene = 3;
    }
});

// Back to main screen button 
var backButton = new Button({
    x: 300, 
    y:340, 
    width:85, 
    height: 40,
    label: " BACK", 
    onClick: function(){
        currentScene = 0;
    }
});

// Draws Main Screen
var splash = function(){
    background(91, 199, 199);
    noStroke();
    fill(244, 202, 22);
    rect(-1, 250, 401, 200);
    fill(0, 0, 0);
    textSize(40);
    text("Flappy Beetleship", 34, 20);  
    fill(0, 0, 0);
    textSize(15); 
    text("Press the Start button and have fun with this game", 30, 350, 350, 100);
    fill(0, 0, 0);
    textSize(29);
    text("Heriell Munoz & Laila Ghazi", 20, 258);
    drawBitmoji(300, 140, 103);
    drawBit(bitmojiXs,bitmojiYs+10,bitmojiH-20);
    startButton.draw();
    guideButton.draw();
};

// Game Over Screen
var losingScreen = function () {
    fill(91, 199, 199);
    rect(0, 0, 399, 400);
    fill(244, 202, 22);
    text("Game Over", 100, 100);
    text("Try Again", 100, 200);
    textSize(24);
    strokeWeight(7);
    point(48, 168);
    point(48, 222);
    point(348, 168);
    point(348, 222);
    text("Score: " +score, 100, 150);
};

// Instruction Screen
var instructionScene = function() {
    background(244, 202, 22);
    fill(255, 255, 255);
    textSize(27);
    text(" Game Instructions", 80, 20);
    textSize(18);
    text("The player controls the beetleship around the screen that can move up and down and thrust forward. Player have to go through each pipe without hitting it to get a point. Once a player hits the pipe, game is over. Have Fun!", 10, 75, 390, 400);
    textSize(18);
    text("Controls:", 150, 220);
    text("Move upwards - Space Bar", 90, 250);
    backButton.draw();
};

// Mouse Clicked function for buttons
mouseClicked = function(){
    
    if(currentScene === 0)
    {
        startButton.handleMouseClick();
        guideButton.handleMouseClick();
    }
    if (currentScene === 3) {
        backButton.handleMouseClick();
    }
};

//Bird object class
var Flappy = function(x, y) {// bird constructor
    this.x = x+10;
    this.y = y;
    this.img = getImage("space/beetleship");// flappy bird 
    this.sticks = 0;
};

Flappy.prototype.draw = function() {
     this.y = constrain(this.y, 0, height-40);
    image(this.img, this.x-18,this.y-30, 60, 70);
};

Flappy.prototype.hop = function() {
    this.y -= 3;
};

Flappy.prototype.fall = function() {
    this.y += 3;
};

//Pipes object class
var Stick = function(x, y) {
    this.x = x;
    this.y = y;
};

// draws pipes using rectangle
Stick.prototype.draw = function(){
    rectMode(LEFT);
    fill(240, 24, 81);
    rect(this.x, this.y, 42,251);
    fill(255, 255, 255);
    rect(this.x+5, this.y, 30,250);
    fill(244, 202, 22);
    rect(this.x+10, this.y, 20,250);
    fill(29, 196, 79);
    rect(this.x+15, this.y, 10,250);
    noStroke();
};
// draws new bird
var flappy = new Flappy(5, 120);

var sticks = [];

for (var i = 3; i < numSticks; i++) {
    sticks.push(new Stick(i*150, random(-100, -200))); // call top pipes constructor
    sticks.push(new Stick(i*150, random(200, 260)));// call bottom pipes constructor
}

//draws cloud on main scren
var Cloud = function(){
    this.x = random(width);
    this.y = random(height/4);
    this.size = random(25, 75);
    this.color = random(200, 255);
    this.speed = random(-2, 2);
};

Cloud.prototype.show = function(){
    noStroke();
    fill(this.color);
    arc(this.x, this.y, this.size, this.size, 180, 360);
    arc(this.x+this.size/2, this.y, this.size/2, this.size/2, 180, 360);
    arc(this.x-this.size/2, this.y, this.size/2, this.size/2, 180, 360);
};

Cloud.prototype.move = function(){
    this.x+=this.speed;
};

Cloud.prototype.offscreen = function(){
    if(this.x>450){
        this.x = -50;
    }
    if(this.x<-50){
        this.x = 450;
    }
};

for(var i = 0; i < 4; i++){
    clouds[i] = new Cloud();
}// foor loop for cloud

// Main Screen
var mainGame = function() {
    if(stillPlaying===true)//allows the game to run 
    {
    background(91, 199, 199);
        }
    // for loop for sticks    
    for ( var i = 0; i < sticks.length; i++) {
        sticks[i].draw();
    // adds a score if bird crosses the pipe without hitting it    
        if(flappy.x > sticks[i].x+11 && flappy.x < sticks[i].x+13 && flappy.y > sticks[i].y+251 && flappy.y < sticks[i+1].y) {
            score++;
        }
    // If touches the pipe
        else if(flappy.x+20 > sticks[i].x && flappy.x < sticks[i].x+42 && flappy.y+15 > sticks[i].y && flappy.y+15 < sticks[i].y+251) {
        currentScene = 2;// game over
    }
    sticks[i].x -= 1;
}
   //key code  
    if ( keyIsPressed && keyCode === 0) {
        flappy.hop();
    }
    else { 
        flappy.fall();
    }
    
    
    noStroke();
    fill(255, 255, 255);
    drawPixelatedEllipse(20, 320, 80, 80, color(247, 244, 247));
    drawPixelatedEllipse(70, 340, 80, 80, color(255, 255, 255));
    drawPixelatedEllipse(115, 325, 80, 75, color(255, 255, 255));
    drawPixelatedEllipse(160, 330, 50, 60, color(255, 255, 255));
    drawPixelatedEllipse(200, 320, 60, 60, color(255, 255, 255));
    drawPixelatedEllipse(240, 325, 60, 80, color(255, 255, 255));
    drawPixelatedEllipse(270, 335, 60, 80, color(255, 255, 255));
    drawPixelatedEllipse(310, 330, 60, 60, color(255, 255, 255));
    drawPixelatedEllipse(350, 325, 50, 60, color(255, 255, 255));
    drawPixelatedEllipse(390, 320, 70, 80, color(255, 255, 255));
    
    drawPixelatedEllipse(112, 370, 76, 76, color(29, 196, 79));
    drawPixelatedEllipse(251, 378, 83, 90, color(29, 196, 79));
    drawPixelatedEllipse(0, 367, 74, 89, color(29, 196, 79));
    drawPixelatedEllipse(350, 368, 73, 60, color(29, 196, 79));
    drawPixelatedEllipse(140, 376, 72, 71, color(29, 196, 79));
    drawPixelatedEllipse(434, 353, 70, 85, color(29, 196, 79));
    drawPixelatedEllipse(207, 380, 77, 86, color(29, 196, 79));
    drawPixelatedEllipse(320, 373, 73, 84, color(29, 196, 79));
    drawPixelatedEllipse(82, 372, 75, 73, color(29, 196, 79));
    drawPixelatedEllipse(221, 380, 77, 84, color(29, 196, 79));
    drawPixelatedEllipse(388, 375, 77, 72, color(29, 196, 79));
    drawPixelatedEllipse(273, 380, 90, 75, color(29, 196, 79));
    drawPixelatedEllipse(404, 388, 88, 88, color(29, 196, 79));
    drawPixelatedEllipse(176, 378, 85, 79, color(29, 196, 79));
    drawPixelatedEllipse(86, 368, 81, 83, color(29, 196, 79));
    drawPixelatedEllipse(293, 378, 88, 90, color(29, 196, 79));
    drawPixelatedEllipse(52, 376, 84, 84, color(29, 196, 79));
    drawPixelatedEllipse(24, 376, 74, 81, color(29, 196, 79));
    fill(244, 202, 22);
    rect(-1, 365, 401, 40);
    
    // draws clouds over and over again
    for(var i = 0; i< clouds.length; i++){
        clouds[i].show();
        clouds[i].move();
        clouds[i].offscreen();
        }
            textSize(20);
    fill(244, 202, 22);
    text("Score:"+ score, 10, 20);// shows score
    flappy.draw();
};

draw = function() {
    if(currentScene===0){
        splash();
     }
    else if (currentScene === 1) {
        mainGame();
     }
    else if ( currentScene === 2) {
        losingScreen();
     }
    else if ( currentScene === 3) {
         instructionScene();
         drawBitmoji(340, 260, 65);
         drawBit(bitmojiXs-10,bitmojiYs+175,bitmojiH-50);
     }
};
